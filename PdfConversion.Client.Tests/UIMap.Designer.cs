// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace PdfConversion.Client.Tests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// HitUpdateWithServerOffline
        /// </summary>
        public void HitUpdateWithServerOffline()
        {
            #region Variable Declarations
            WpfButton uIRefreshListButton = this.UIPdfConversionWindow.UIRefreshListButton;
            #endregion

            // Click 'Refresh List' button
            Mouse.Click(uIRefreshListButton, new Point(47, 10));

            // Click 'Refresh List' button
            Mouse.Click(uIRefreshListButton, new Point(47, 10));

            // Click 'Refresh List' button
            Mouse.Click(uIRefreshListButton, new Point(52, 8));
        }
        
        /// <summary>
        /// UpdateWithServerOnline9Test
        /// </summary>
        public void UpdateWithServerOnline9Test()
        {
            #region Variable Declarations
            WpfButton uIRefreshListButton = this.UIPdfConversionWindow.UIRefreshListButton;
            #endregion

            // Click 'Refresh List' button
            Mouse.Click(uIRefreshListButton, new Point(59, 13));
        }
        
        /// <summary>
        /// ViewPdf
        /// </summary>
        public void ViewPdf()
        {
            #region Variable Declarations
            WpfButton uIRefreshListButton = this.UIPdfConversionWindow.UIRefreshListButton;
            WpfListItem uIPdfConversionClientCListItem = this.UIPdfConversionWindow.UIListBoxFilesList.UIPdfConversionClientCListItem;
            WinButton uIYesButton = this.UIConvertedWindow.UIYesWindow.UIYesButton;
            WinButton uIStartButton = this.UIReadingUntaggedDocumWindow.UIItemWindow.UIItemGroup.UIStartButton;
            #endregion

            // Click 'Refresh List' button
            Mouse.Click(uIRefreshListButton, new Point(45, 6));

            // Double-Click 'PdfConversion.Client.ConversionServiceReference.Fi...' list item
            Mouse.DoubleClick(uIPdfConversionClientCListItem, new Point(40, 11));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(63, 15));

            // Click '&Start' button
            Mouse.Click(uIStartButton, new Point(38, 13));
        }
        
        /// <summary>
        /// ViewStatusOfErroneousFile
        /// </summary>
        public void ViewStatusOfErroneousFile()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIErroneousFileWindow.UIOKWindow.UIOKButton;
            #endregion

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(50, 15));
        }
        
        /// <summary>
        /// JustViewStatusAndNotOpenPdf
        /// </summary>
        public void JustViewStatusAndNotOpenPdf()
        {
            #region Variable Declarations
            WinButton uINOButton = this.UIConvertedWindow.UINOWindow.UINOButton;
            #endregion

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(51, 15));
        }
        
        #region Properties
        public UIPdfConversionWindow UIPdfConversionWindow
        {
            get
            {
                if ((this.mUIPdfConversionWindow == null))
                {
                    this.mUIPdfConversionWindow = new UIPdfConversionWindow();
                }
                return this.mUIPdfConversionWindow;
            }
        }
        
        public UIConvertedWindow UIConvertedWindow
        {
            get
            {
                if ((this.mUIConvertedWindow == null))
                {
                    this.mUIConvertedWindow = new UIConvertedWindow();
                }
                return this.mUIConvertedWindow;
            }
        }
        
        public UIReadingUntaggedDocumWindow UIReadingUntaggedDocumWindow
        {
            get
            {
                if ((this.mUIReadingUntaggedDocumWindow == null))
                {
                    this.mUIReadingUntaggedDocumWindow = new UIReadingUntaggedDocumWindow();
                }
                return this.mUIReadingUntaggedDocumWindow;
            }
        }
        
        public UIErroneousFileWindow UIErroneousFileWindow
        {
            get
            {
                if ((this.mUIErroneousFileWindow == null))
                {
                    this.mUIErroneousFileWindow = new UIErroneousFileWindow();
                }
                return this.mUIErroneousFileWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPdfConversionWindow mUIPdfConversionWindow;
        
        private UIConvertedWindow mUIConvertedWindow;
        
        private UIReadingUntaggedDocumWindow mUIReadingUntaggedDocumWindow;
        
        private UIErroneousFileWindow mUIErroneousFileWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIPdfConversionWindow : WpfWindow
    {
        
        public UIPdfConversionWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Pdf Conversion";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Pdf Conversion");
            #endregion
        }
        
        #region Properties
        public WpfButton UIRefreshListButton
        {
            get
            {
                if ((this.mUIRefreshListButton == null))
                {
                    this.mUIRefreshListButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIRefreshListButton.SearchProperties[WpfButton.PropertyNames.Name] = "Refresh List";
                    this.mUIRefreshListButton.WindowTitles.Add("Pdf Conversion");
                    #endregion
                }
                return this.mUIRefreshListButton;
            }
        }
        
        public UIListBoxFilesList UIListBoxFilesList
        {
            get
            {
                if ((this.mUIListBoxFilesList == null))
                {
                    this.mUIListBoxFilesList = new UIListBoxFilesList(this);
                }
                return this.mUIListBoxFilesList;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIRefreshListButton;
        
        private UIListBoxFilesList mUIListBoxFilesList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIListBoxFilesList : WpfList
    {
        
        public UIListBoxFilesList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "listBoxFiles";
            this.WindowTitles.Add("Pdf Conversion");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIPdfConversionClientCListItem
        {
            get
            {
                if ((this.mUIPdfConversionClientCListItem == null))
                {
                    this.mUIPdfConversionClientCListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIPdfConversionClientCListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "PdfConversion.Client.ConversionServiceReference.FileStatus";
                    this.mUIPdfConversionClientCListItem.WindowTitles.Add("Pdf Conversion");
                    #endregion
                }
                return this.mUIPdfConversionClientCListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIPdfConversionClientCListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIConvertedWindow : WinWindow
    {
        
        public UIConvertedWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Converted";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Converted");
            #endregion
        }
        
        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow mUIYesWindow;
        
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Converted");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Converted");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Converted");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Converted");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIReadingUntaggedDocumWindow : WinWindow
    {
        
        public UIReadingUntaggedDocumWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Reading Untagged Document";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Reading Untagged Document");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "GroupBox";
            this.WindowTitles.Add("Reading Untagged Document");
            #endregion
        }
        
        #region Properties
        public UIItemGroup UIItemGroup
        {
            get
            {
                if ((this.mUIItemGroup == null))
                {
                    this.mUIItemGroup = new UIItemGroup(this);
                }
                return this.mUIItemGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIItemGroup mUIItemGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIItemGroup : WinGroup
    {
        
        public UIItemGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Reading Untagged Document");
            #endregion
        }
        
        #region Properties
        public WinButton UIStartButton
        {
            get
            {
                if ((this.mUIStartButton == null))
                {
                    this.mUIStartButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIStartButton.SearchProperties[WinButton.PropertyNames.Name] = "Start";
                    this.mUIStartButton.WindowTitles.Add("Reading Untagged Document");
                    #endregion
                }
                return this.mUIStartButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIStartButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIErroneousFileWindow : WinWindow
    {
        
        public UIErroneousFileWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Erroneous File";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Erroneous File");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Erroneous File");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Erroneous File");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
